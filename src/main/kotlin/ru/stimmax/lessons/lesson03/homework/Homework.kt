package ru.stimmax.lessons.lesson03.homework

import com.sun.tools.javac.Main
import kotlin.properties.Delegates


//1.Название мероприятия. Можно и "Monster Hackaton".
val eventName: String = "Hackathon Survival"
    get() {return field}
//2. Дата проведения. Может перенестись

var eventDate: String = "12 января 2026 года"

//3. Место проведения. Может измениться
var location: String = "Улица пушкина, проспект колотушкина 33"

//4. Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы.
private lateinit var budget: String

//5. Количество участников. Может измениться.
var particigpantsCount: Int = 50
    get() {return field
    }
    set(value){
        if (value > 0){
            field = value
        }
    }

//6. Длительность хакатона в днях. Тоже варьируется и может меняться.
var eventDuration: Int = 1
    get() {return field}
    set(value) {
        if(value>0) {
            field = value
        }
    }

//7.Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.
private var SupplierAgreement: String = "Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг."

//8. Текущее состояние хакатона (статус)
private var eventStatus: String = "Запланирован"
    get() {return field}
    private set(value) {
       //Если запланирован, проводится, окончен, то засетить
    }
//9. Список спонсоров
var sponsorsList: String = "Много спонсоров перечислено"

//10. Бюджет мероприятия
var eventBudget: Double = 1_000_000.00
    get() {return field}
   private set(value) {}
//11. Текущий уровень доступа к интернету
private val internetStrength by lazy { "Как-то вычисляется. Думаю техничсекая часть не должна быть публичной" }

//12. Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.
private var equipmentDetails:String = "Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки."
    set(value) {}
    get() {return field}

//13. Количество команд
val teamsCount by lazy { "Как-то вычисляется от количества участников" }

//14. Перечень задач
private val tasksForEvent: String ="Перечень задач"

//15. План эвакуации
val EvacuationPlan: String = "План эвакуации"
//16. Список доступного оборудования (всё, что выделено для использования на мероприятии)
var allocatedEquipment: String = "Список доступного оборудования (всё, что выделено для использования на мероприятии)"
    get() {return field}
    set(value) {"Какая то логика"}
//17. Список свободного оборудования (всё, что можно взять прямо сейчас и что не занято другими участниками)
var availableEquipment: String = "availableEquipment"
    get() {return field}
    set(value) {"Какая то логика"}
//18 рафик питания участников (зависит от поставщика питания, определяемого за неделю до начала)
private val mealSchedule by lazy { "За неделю узнаем график" }

//19. План мероприятий на случай сбоев
val contingencyPlan: String = "План мероприятий на случай сбоев"

//20. Список экспертов и жюри
private var JuryList: String = "Список экспертов и жюри"

//21. Политика конфиденциальности
val privacyPolicy: String = "Список экспертов и жюри"

//22. Приватные отзывы (фидбэк) участников и зрителей для анализа проблем.
private var participantFeedback: String = "Приватные отзывы (фидбэк) участников и зрителей для анализа проблем."
    get() {return field}
    set(value) {"Какая то логика"}
//23. Текущая температура в помещении
private var CurrentRoomTemperature: Int = 22

//24. Данные мониторинга и анализ производительности сетевого оборудования и интернет-соединения для целей отладки своих приложений командами
private var networkPerformanceAnalysis: String = "Данные мониторинга и анализ производительности сетевого оборудования и интернет-соединения для целей отладки своих приложений командами"

//25. Регулятор скорости интернета
private var internetRateController: Double = 100.00
//26. Уровень освещения
private var lightinglevel: Double = 100.00

//27. Лог событий мероприятия
private var eventLog: String = "Лог событий мероприятия"

//28. Возможность получения медицинской помощи прямо на мероприятии (да/нет)
val hasMedicalSupportOnEvent: Boolean = true

//29. Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.
private val safetyProcedures:String  = "Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций."

//30. Регистрационный номер мероприятия. Это общая инфа??
var eventRegistrationNumber: String = "Регистрационный номер мероприятия. Это общая инфа??"

//31. Максимально допустимый уровень шума в помещении хакатона.
private val maxNoiseLevelDb: Int = 90

//32. Индикатор превышения уровня шума в помещениях (превышен или не превышен в данный момент)
private var noiseOverLimit: Boolean = false

//33. План взаимодействия с прессой
private var pressRelationsPlan: String = "План взаимодействия с прессой"

//34. Детальная публичная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.
val teamsDetails: String by lazy { " " }

//35. Статус получения всех необходимых разрешений для проведения мероприятия
private var permitsApproved: Boolean = false

//36. Индикатор доступности специализированного оборудования в данный момент (например, специальному оборудованию)
private var isSpecialEquipmentAvailable: Boolean = false

//37. Список партнеров мероприятия
private val eventParterList: String = "Список партнеров мероприятия"

//38. Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.
val postEventReport:String by lazy { "" }

//39. Внутренние правила распределения призов
private var PrizeDistributionRule: String = "Внутренние правила распределения призов"

//40. Список разыгрываемых призов
val prizeList: String = "Cписок разыгрываемых призов"

//41. Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования.
private var emergencyServicesContacts: String = "Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования."

//42. Особые условия для участников с ограниченными возможностями
var accessibilityConditions: String ="Особые условия для участников с ограниченными возможностями"

//43. Общее настроение участников (определяется опросами)
lateinit var overallMood: String

//44. Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия, так как зависит от фактического состава команд и взятых в работу задач.
val eventAgenda: String by lazy { "" }

//45. Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия, но в момент инициализации неизвестно.
lateinit var famousGuest: String

//46. Максимальное количество людей, которое может вместить место проведения.
private val EventСapacity: Int = 650

//47. Количество часов, отведенное каждой команде для работы над проектом.
private lateinit var projectHours: String